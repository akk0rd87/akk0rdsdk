apply plugin: 'com.android.model.application'

def akkord_sdk_path = System.getenv('AKKORD_SDK_HOME')

gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

model {
    repositories {
        libs(PrebuiltLibraries) {
//            SDL2 {
//                headers.srcDir "${akkord_sdk_path}/libraries/SDL/SDL/include"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("${akkord_sdk_path}/libraries/SDL/android/lib/${targetPlatform.getName()}/libSDL2.so")
//                }
//            }

//            SDL2_image {
//                headers.srcDir "${akkord_sdk_path}/libraries/SDLLibs/SDL2_image/include"
//                binaries.withType(SharedLibraryBinary) {
//                    sharedLibraryFile = file("${akkord_sdk_path}/libraries/SDLLibs/android/libs/SDL2_image/${targetPlatform.getName()}/libSDL2_image.so")
//                }
//            }

            main {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file("../main/lib/${targetPlatform.getName()}/libmain.so")
                }
            }
        }
    }

    android {
        compileSdkVersion = rootProject.ext.compileSdkVersion
        buildToolsVersion = rootProject.ext.buildToolsVersion

        defaultConfig {

        }
        sources {
            main {
                jni {
                    dependencies {
                        project ':main'      linkage 'shared'
                        //library 'SDL2'       linkage 'shared'
                        //library 'SDL2_image' linkage 'shared'
                    }
                }
                jniLibs {
                    source {
                        srcDir "../main/lib"
                    }
                }
                java {
                    source {
                        srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/wrapper/"
                        //srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/admob/"
                    }
                }
//                manifest {
//                    source {
//                        srcDir "../main/lib"
//                    }
//                }
                assets {
                     source {
                         srcDir "../../assets/"
                         srcDir "${akkord_sdk_path}/resources/adimages/"
                     }
                }
            }
        }

        buildTypes {
            release {
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.txt'))
                signingConfig = $("android.signingConfigs.myConfig")
            }
        }
        productFlavors {
            // for detailed abiFilter descriptions, refer to "Supported ABIs" @
            // https://developer.android.com/ndk/guides/abis.html#sa
//            create("arm") {
//                ndk.abiFilters.add("armeabi")
//            }
            create("arm7") {
                ndk.abiFilters.add("armeabi-v7a")
            }
//            create("arm8") { // на этом падает с ошибкой что не может загрузить SDL library
//                ndk.abiFilters.add("arm64-v8a")
//            }
//            create("x86") {
//                ndk.abiFilters.add("x86")
//            }
//            create("x86-64") {
//                ndk.abiFilters.add("x86_64")
//            }
//            create("mips") {
//                ndk.abiFilters.add("mips")
//            }
//            create("mips-64") {
//                ndk.abiFilters.add("mips64")
//            }
            // To include all cpu architectures, leaves abiFilters empty
//            create("all")
        }
    }

    android.signingConfigs {
        create("myConfig") {
            storeFile "C:/Instruments/Android/WordsRuFree.keystore"
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
            storeType "jks"
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn ':main:distributeLib'
    }
}
