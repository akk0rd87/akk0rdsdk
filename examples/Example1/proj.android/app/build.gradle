apply plugin: 'com.android.application'

def akkord_sdk_path        = System.getenv('AKKORD_SDK_HOME')
def proGuardParamsDir      = System.getenv('AKKORD_SDK_HOME') + "/framework/core/platformwrapper/android/proguard/"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion    = 16
        targetSdkVersion = 29

        versionName '1.0.4'
        versionCode 7
    }
    externalNativeBuild {
        ndkBuild {
            // Tells Gradle to find the root ndk-build script in the same
            // directory as the module's build.gradle file. Gradle requires this
            // build script to add your ndk-build project as a build dependency and
            // pull your native sources into your Android project.
            buildStagingDirectory "../main/lib"
            path "../main/Android.mk"

            //cppFlags.addAll(["-std=c++11"])
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile '../AndroidManifest.xml'
            java.srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/wrapper/"
         // java.srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/admob/"
         // java.srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/billing/"
            java.srcDir '../java'
            res.srcDirs = ['../res']
            assets.srcDir '../../assets'
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file(proGuardParamsDir + 'proguard-rules_release.pro').absolutePath
        }
        debug {
        }
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable false

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            //reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            //include "x86", "armeabi", "armeabi-v7a", "armeabi-v8a", "x86_64", "arm64-v8a"
            //include "armeabi", "armeabi-v7a", "armeabi-v8a"
            //include "x86", "armeabi", "armeabi-v7a", "armeabi-v8a", "x86_64", "arm64-v8a", "armeabi", "mips", "mips64"
            //include  "x86_64"
            //include "armeabi-v7a"
            //include "x86"
            //include "armeabi-v7a"
            //include "x86"

            // generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
}

dependencies {
    implementation 'com.getkeepsafe.relinker:relinker:1.4.1'
}
