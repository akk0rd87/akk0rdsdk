apply plugin: 'com.android.application'

def akkord_sdk_path        = System.getenv('AKKORD_SDK_HOME')
def proGuardParamsDir      = System.getenv('AKKORD_SDK_HOME') + "/framework/core/platformwrapper/android/proguard/"
def keystoreFile           = System.getenv('ANDROID_KEYSTORE_HOME') + "/keystore.keystore"
def keystoreParamsFile     = System.getenv('ANDROID_KEYSTORE_HOME') + "/keystore.params"
def gradleConfig           = System.getenv('AKKORD_SDK_HOME') + "/tools/android/gradle.config"

def keystoreProperties     = new Properties()
keystoreProperties.load(new FileInputStream(keystoreParamsFile))

def gradleProperties       = new Properties()
gradleProperties.load(new FileInputStream(gradleConfig))

android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreFile)
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion    = 16
        targetSdkVersion = 29

        versionName '1.0.28'
        versionCode 39
    }
    externalNativeBuild {
        ndkBuild {
            // Tells Gradle to find the root ndk-build script in the same
            // directory as the module's build.gradle file. Gradle requires this
            // build script to add your ndk-build project as a build dependency and
            // pull your native sources into your Android project.
            buildStagingDirectory "../main/lib"
            path "../main/Android.mk"

            //cppFlags.addAll(["-std=c++11"])
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            manifest.srcFile '../AndroidManifest.xml'
            java.srcDir "${akkord_sdk_path}/libraries/SDL/SDL/android-project/app/src/main/java/org/libsdl/app/"
            java.srcDir "${akkord_sdk_path}/framework/core/platformwrapper/android/wrapper/"
            java.srcDir '../java'
            res.srcDirs = ['../res']
            assets.srcDir '../../assets'
            //assets.srcDir "${akkord_sdk_path}/resources/adimages/"
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file(proGuardParamsDir + 'proguard-rules_release.pro').absolutePath
            signingConfig signingConfigs.release
        }
    }
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            //reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            //include "x86", "armeabi", "armeabi-v7a", "armeabi-v8a", "x86_64", "arm64-v8a"
            //include "armeabi", "armeabi-v7a", "armeabi-v8a"
            //include "x86", "armeabi", "armeabi-v7a", "armeabi-v8a", "x86_64", "arm64-v8a", "armeabi", "mips", "mips64"
            //include  "x86_64"
            //include "armeabi-v7a"
            //include "x86"

            // generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a'     :1,
                'x86'             :2,
                'x86_64'          :3,
                'arm64-v8a'       :4
                ]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.
android.applicationVariants.all { variant ->

  // Assigns a different version code for each output APK
  // other than the universal APK.
  variant.outputs.each { output ->

    // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
    def baseAbiVersionCode =
            // Determines the ABI for this variant and returns the mapped value.
            project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

    // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
    // the following code does not override the version code for universal APKs.
    // However, because we want universal APKs to have the lowest version code,
    // this outcome is desirable.
    if (baseAbiVersionCode != null) {
      // Assigns the new version code to versionCodeOverride, which changes the version code
      // for only the output APK, not for the variant itself. Skipping this step simply
      // causes Gradle to use the value of variant.versionCode for the APK.
      output.versionCodeOverride =
              baseAbiVersionCode + variant.versionCode
    }
  }
}

dependencies {
    implementation gradleProperties['app_relinker']
    implementation gradleProperties['app_admobads']
    implementation gradleProperties['app_firebase-core']
    implementation gradleProperties['app_play-billing']
    implementation gradleProperties['app_play-services-games']
    implementation gradleProperties['app_play-services-auth']
    implementation gradleProperties['app_play-review']
    implementation gradleProperties['app_app-update']
    implementation gradleProperties['app_play-appset']
    implementation gradleProperties['app_yandexads']
}
